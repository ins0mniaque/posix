#!/bin/sh
#
# template - POSIX compliant shell script template

version() { echo 'template 1.0.8'; }

# region Help / Usage

header() { echo >&2 'template is a POSIX compliant shell script template.'; }

desc() {
    colors NORMAL BOLD RED GREEN YELLOW BLUE MAGENTA CYAN

    echo >&2 "\
template demonstrates how to parse options, process arguments and output ${BOLD}${RED}c${GREEN}o${YELLOW}l${BLUE}o${MAGENTA}r${CYAN}s${NORMAL}
while maintaining POSIX compliance.
"
}

help() {
    colors NORMAL BOLD

    echo >&2 "For listing the command options, use '${0##*/} ${BOLD}--help${NORMAL}'."
}

man() {
    colors NORMAL ITALIC

    echo >&2 "
For more advanced usage see the template(1) manpage ${ITALIC}('man template')${NORMAL} and/or
https://github.com/ins0mniaque/posix."
}

usage() {
    colors NORMAL BOLD ITALIC UNDERLINE

    echo >&2 "
${BOLD}${UNDERLINE}Usage${NORMAL}: ${BOLD}template${NORMAL} [${ITALIC}options${NORMAL}] [${ITALIC}files${NORMAL}]
                [-h|--help|-v|--version]
"
}

options() {
    colors NORMAL BOLD ITALIC UNDERLINE

    echo >&2 "\
${BOLD}${UNDERLINE}Options${NORMAL}:
  ${BOLD}-b, --boolean               ${NORMAL}Set boolean option
  ${BOLD}-s STR, --string STR,
  ${BOLD}-s=STR, --string=STR        ${NORMAL}Set string option to STR
  ${BOLD}-                           ${NORMAL}Read from STDIN
  ${BOLD}-i INPUT, --input INPUT,
  ${BOLD}-i=INPUT, --input=INPUT     ${NORMAL}Read from string value of INPUT
  ${BOLD}-h, --help                  ${NORMAL}Display help and exit
  ${BOLD}-v, --version               ${NORMAL}Display the version number and exit
"
}

invalid() {
    colors NORMAL BOLD ITALIC UNDERLINE RED YELLOW

    LF='
'
    error=${2#getopt: }
    error=${error%%"${LF}"*}
    case $error in
        *' -- '*) option=${error#* -- }
                  [ "$option" = - ] && option=${1#-}
                  option=${option#-}
                  error=${error% -- *}
                  error="$error -- ${YELLOW}$option${NORMAL}" ;;
        *'`'*\'*) option=${error#*\`};
                  option=${option%\'*};
                  error="${error%%\`*}'${YELLOW}$option${NORMAL}'${error##*\'}" ;;
        *\'*\'*)  option=${error#*\'};
                  option=${option%\'*};
                  error="${error%%\'*}'${YELLOW}$option${NORMAL}'${error##*\'}" ;;
    esac

    echo >&2 "${BOLD}${RED}error:${NORMAL} $error"
}

colors() {
    for color in "$@"; do
        case $color in
            NORMAL)    NORMAL=${NORMAL:-$(      tput sgr0    2> /dev/null || printf '\033[0m')}  ;;
            BOLD)      BOLD=${BOLD:-$(          tput bold    2> /dev/null || printf '\033[1m')}  ;;
            DIM)       DIM=${DIM:-$(            tput dim     2> /dev/null || printf '\033[2m')}  ;;
            ITALIC)    ITALIC=${ITALIC:-$(      tput sitm    2> /dev/null || printf '\033[3m')}  ;;
            UNDERLINE) UNDERLINE=${UNDERLINE:-$(tput smul    2> /dev/null || printf '\033[4m')}  ;;
            BLACK)     BLACK=${BLACK:-$(        tput setaf 0 2> /dev/null || printf '\033[30m')} ;;
            RED)       RED=${RED:-$(            tput setaf 1 2> /dev/null || printf '\033[31m')} ;;
            GREEN)     GREEN=${GREEN:-$(        tput setaf 2 2> /dev/null || printf '\033[32m')} ;;
            YELLOW)    YELLOW=${YELLOW:-$(      tput setaf 3 2> /dev/null || printf '\033[33m')} ;;
            BLUE)      BLUE=${BLUE:-$(          tput setaf 4 2> /dev/null || printf '\033[34m')} ;;
            MAGENTA)   MAGENTA=${MAGENTA:-$(    tput setaf 5 2> /dev/null || printf '\033[35m')} ;;
            CYAN)      CYAN=${CYAN:-$(          tput setaf 6 2> /dev/null || printf '\033[36m')} ;;
            WHITE)     WHITE=${WHITE:-$(        tput setaf 7 2> /dev/null || printf '\033[37m')} ;;
        esac
    done
}

# endregion Help / Usage

parse() {
    case $2 in
        -*|'') invalid "$1" 'option requires an argument -- -'; usage; help; return 2 ;;
        *)     printf  '%s' "$2" ;;
    esac
}

[ ! -t 0 ] && set -- "$@" -
[ $# = 0 ] && set -- --help

boolean=0
string=

while [ $# -gt 0 ] && [ "$1" != -- ]; do
    case $1 in
        -b|--boolean)    boolean=1; shift ;;
        -s|--string)     string=$(parse "$1" "$2") || exit $?; [ $# -gt 1 ] && shift; shift ;;
        -s=*|--string=*) string=$(parse "${1%%=*}" "${1#*=}") || exit $?;             shift ;;
        -\?|-h|--help)   header; usage; desc; options; help; man; exit 0 ;;
        -v|--version)    version;                                 exit 0 ;;

        -i|--input)     value=$(parse "$1" "$2") || exit $?; [ $# -gt 1 ] && shift
                        set -- "$@" -- --input "$value"; shift ;;
        -i=*|--input=*) value=$(parse "${1%%=*}" "${1#*=}") || exit $?
                        set -- "$@" -- --input "$value"; shift ;;
        -)              set -- "$@" -- -;                shift ;;

        -*) if opt=$(getopt 'bhi:s:v' "$1" 2>&1) && shift; then
                [ -n "$ZSH_VERSION" ] && setopt shwordsplit > /dev/null 2>&1
                # shellcheck disable=SC2086
                set -- ${opt% --} "$@"
                [ -n "$ZSH_VERSION" ] && unsetopt shwordsplit > /dev/null 2>&1

                continue
            else
                invalid "$1" "$opt"; usage; help; exit 2
            fi ;;
        *)  set -- "$@" -- "$1"; shift ;;
    esac
done

echo "Boolean option: $boolean"
echo "String option: $string"

while [ $# -gt 0 ]; do
    case $1 in
        --)                            shift ;;
        --input) echo "Input: $2";     shift; shift ;;
        -)       echo "Input: $(cat)"; shift ;;
        *)       echo "File: $1";      shift ;;
    esac
done
